name: Production Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20.x'

jobs:
  # Security scan first
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run dependency vulnerability check
        uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request'

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Run comprehensive tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: security
    
    strategy:
      matrix:
        node-version: ['18.x', '20.x']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run typecheck

      - name: Lint code
        run: npm run lint

      - name: Run tests with coverage
        run: npm run test:coverage
        env:
          NODE_ENV: test
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL || 'https://test.supabase.co' }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY || 'test-anon-key' }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Check coverage thresholds
        run: |
          echo "Checking test coverage meets minimum requirements..."
          npm run test:coverage -- --reporter=json | jq '.coverageMap'

  # Build verification with multiple environments
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: test
    if: always() && (needs.test.result == 'success')
    
    strategy:
      matrix:
        environment: [staging, production]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for ${{ matrix.environment }}
        run: npm run build
        env:
          NODE_ENV: production
          VITE_APP_ENV: ${{ matrix.environment }}
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL || 'https://placeholder.supabase.co' }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY || 'placeholder-key' }}

      - name: Analyze bundle size
        run: npm run build -- --analyze
        if: matrix.environment == 'production'

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.environment }}
          path: dist/
          retention-days: 7

  # Performance testing
  lighthouse:
    name: Lighthouse Performance
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-production
          path: dist/

      - name: Serve static files
        run: |
          npm install -g serve
          serve -s dist -l 3000 &
          sleep 5

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v12
        with:
          configPath: './.lighthouserc.json'
          uploadArtifacts: true

  # Deployment notification (Vercel handles actual deployment)
  deploy-notification:
    name: Deployment Status
    runs-on: ubuntu-latest
    needs: [security, test, build]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Check deployment readiness
        run: |
          if [[ "${{ needs.security.result }}" == "success" && "${{ needs.test.result }}" == "success" && "${{ needs.build.result }}" == "success" ]]; then
            echo "‚úÖ All checks passed. Ready for production deployment."
            echo "üöÄ Vercel will handle the actual deployment automatically."
          else
            echo "‚ùå Deployment blocked due to failed checks:"
            echo "Security: ${{ needs.security.result }}"
            echo "Tests: ${{ needs.test.result }}"
            echo "Build: ${{ needs.build.result }}"
            exit 1
          fi

      - name: Create deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const { context } = require('@actions/github');
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 'manual',
              state: 'success',
              description: 'Production deployment ready',
              environment: 'production'
            });

      - name: Notify deployment
        run: |
          echo "üéâ Acelo production deployment initiated!"
          echo "üìä Monitor deployment at: https://vercel.com/dashboard"
          echo "üîó Production URL: https://acelo.ai"